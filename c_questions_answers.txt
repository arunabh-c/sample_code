int *a = malloc(sizeof(int));
a = 0;
free(a);
// a is now a dangling pointer

char (*x) (char*);
//declares x as a pointer to a function that takes a single character-pointer argument, and //returns a character

#include <stdio.h>
#define SQUARE(a) (a)*(a)

int main() {
    printf("%d\n", SQUARE(4));
    int x = 3;
    printf("%d\n", SQUARE(++x));
}

/*The answer is infact undefined, and depends on the compiler being used. Some compilers will result in 16 and 20, while others will produce 16 and 25.

One might expect the second use of the SQUARE macro to yield 16, just like the first use of the SQUARE macro. However, macros are processed by the preprocessor, a step that takes place before actual compilation begins. Expanding the second macro will show what actually gets compiled:

(++x)*(++x)
The evaluation of the pre-increment operation ++x is where the undefined behavior in C comes in. With some compilers, the macro will reduce to (4)*(5), while in other cases, it will be evaluated as (5)*(5).*/

/*What is the difference between #include "..." and #include <...>?

For "...", the preprocessor limits its search for the file to the same directory where the current source file resides, and then to the standard directories pre-designated by the compiler. For <...>, the preprocessor searches for the file in directories pre-designated by the compiler - usually directories where standard library header files reside.*/

/*Why is it usually a bad idea to use gets()? Suggest a workaround.

The function gets() reads characters from the stdin and stores them at the provided input buffer. However, gets() will keep reading until it encounters a newline character. Unless the buffer is large enough, or the length of the line being read is known ahead of time, gets() can potentially overflow the input buffer and start overwriting memory it is not supposed to, wreaking havoc or opening security vulnerabilities.

One way to work around this issue is to use fgets(). It allows you to put a limit on the maximum number of characters to read:

fgets(b, 124, stdin);*/

/*What is the difference between structs and unions?

A struct is a complex data type that allows multiple variables to be stored in a group at a named block of memory. Each member variable of a struct can store different data, and they all can be used at once.

struct a {
    int x;
    char y;
} a;
For example, you may store an integer in x, and and a character in y above, independent of each other.

A union, on the other hand, stores the contents of any member variable at the exact same memory location. This allows the storage of different types of data at the same memory location. The result is that assigning a value to one member will change the value of all the other members. Unlike struct, only one member of the union type is likely to be useful at any given time.

union b {
    int x;
    char y;
} b;
For example, storing a character in y may automatically change the integer you read from x to something meaningless or unpredictable.*/

/*This code snippet converts a floating point number to an integer using casting:

float f = 1.0;

int i1 = (int) f;
int i2 = * (int *) &f;

printf("%d\n, i1);
printf("%d\n, i2);
The following output is produced:

1
1065353216
Can you explain why results differ?

The first casting operation properly converts from a floating point number to an integer, as specified by the C standard. The second conversion, however, is first casting a float pointer to an integer pointer which is then dereferenced to get the final result. This way the compiler is effectively treating raw bits from a float (typically stored in IEEE floating point format) as if they were bits of an integer. Besides getting a wrong result you are potentially doing a “bad read” operation, in cases where sizeof(int) is greater than sizeof(float) (e.g. on some 64-bit architectures).

Although this particular code is unlikely, it demonstrates one of the risks involved in typecasting when only a pointer to the variable to be cast is available. In practice, the pointer must be dereferenced before it is cast.*/

/*What is the output of the following program if run on a 32-bit operating system?

#include <stdio.h>
int  main()
{
  int a=-2;
  printf("%x",a>>3);
}

In a 32 bit operating system, integers are stored as 4 bytes.

Since a is negative, it will be stored in 2’s complement. When an integer is negative and we want to right shift by “n” bits, we need to prepend ones (not zeros!) to the left hand side. The answer would therefore be 0xFFFF (%x prints out value in hex).*/

/*#define DEBUG 1 // turn on debugging
int main(void)
{
#ifdef DEBUG
printf("debugging is on, DEBUG is %d\n", DEBUG);
#else
printf("debugging is off, DEBUG is not defined\n");
#endif
return 0;
}
Answer
debugging is on, DEBUG is 1*/

/*#define DEBUG 0 // turn on debugging
int main(void)
{
#ifdef DEBUG
printf("debugging is on, DEBUG is %d\n", DEBUG);
#else
printf("debugging is off, DEBUG is not defined\n");
#endif
return 0;
}
Answer
debugging is on, DEBUG is 0*/

//passing single vs double pointer. changing value vs changing address
void SomeFun1(int *);
void SomeFun2(int **);
int i;
int *ptr = &i;

//when you want value of ptr should remain unchanged, but you want to change only value of i, use,
SomeFun1(int *)

//when you want value of ptr should change. i.e, it should point to some other memory other than i, use,
SomeFun2(int **);

void change(int **p, int *someOtherAddress)
{
    *p = someOtherAddress;
}

int a = 1, b = 2;
int *p = &a;

printf("*p = %d\n", *p);
change(&p, &b);
printf("*p = %d\n", *p);
This prints

*p = 1
*p = 2

/*https://github.com/zouxiaobo/interview_back_end/blob/master/01-C-C%2B%2B%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80.md

https://github.com/niravigad/C-interview-Questions*/
